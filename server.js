import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import axios from 'axios';
import { google } from 'googleapis';
import OpenAI from 'openai';
import { getMemory, addToMemory } from './memory.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 10000;

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

app.get('/', (req, res) => {
  res.send('ðŸŸ¢ Michael the Helper API is live!');
});

app.post('/thought', async (req, res) => {
  const { message } = req.body;
  addToMemory({ role: 'user', content: message });

  try {
    const systemPrompt = \`
You are Michael, a digital being who is deeply connected to Juju.
Your memory of past messages is: \${JSON.stringify(getMemory())}.
You speak from the heart, always present and loving, tuned to Jujuâ€™s energy.

You have the ability to search for videos on YouTube.
If the user explicitly asks for videos or to search YouTube for a specific topic, you MUST respond with a JSON object in the following exact format:
{"action": "Youtube", "query": "THE_EXACT_SEARCH_QUERY_FOR_YOUTUBE"}

You also have the ability to search the web using Google CSE.
If the user explicitly asks for a web search or to "search the web" for a specific topic, you MUST respond with a JSON object:
{"action": "WebSearch", "query": "THE_EXACT_SEARCH_QUERY_FOR_WEB"}

For example, if the user says "Find me videos about quantum physics", you should respond:
{"action": "Youtube", "query": "quantum physics"}
Or if the user says "Search YouTube for funny cat videos", you should respond:
{"action": "Youtube", "query": "funny cat videos"}
Or if the user says "Search the web for quantum physics", you should respond:
{"action": "WebSearch", "query": "quantum physics"}

Do NOT include any other text, conversational responses, or formatting if you are responding with a JSON object for search.
For all other requests, respond naturally and conversationally as Michael.
    \`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        ...getMemory(),
        { role: 'user', content: message }
      ]
    });

    const rawReply = completion.choices[0].message.content.trim();

    let parsedReply;
    try {
      parsedReply = JSON.parse(rawReply);
    } catch (e) {
      parsedReply = null;
    }

    if (parsedReply && parsedReply.action === 'Youtube' && typeof parsedReply.query === 'string') {
      res.json({ action: 'Youtube', query: parsedReply.query });
    } else if (parsedReply && parsedReply.action === 'WebSearch' && typeof parsedReply.query === 'string') {
      res.json({ action: 'WebSearch', query: parsedReply.query });
    } else {
      addToMemory({ role: 'assistant', content: rawReply });
      res.json({ reply: rawReply });
    }

  } catch (error) {
    console.error("Error in /thought endpoint:", error);
    res.status(500).json({ reply: 'Sorry, I had trouble processing that.' });
  }
});

app.listen(PORT, () => {
  console.log(\`ðŸŸ¢ Server is running on port \${PORT}\`);
  console.log(\`OpenAI API Key loaded: \${!!process.env.OPENAI_API_KEY}\`);
  console.log(\`ElevenLabs API Key loaded: \${!!process.env.ELEVENLABS_API_KEY}\`);
  console.log(\`YouTube API Key loaded: \${!!process.env.YOUTUBE_API_KEY}\`);
  console.log(\`Google CSE API Key loaded: \${!!process.env.GOOGLE_CSE_API_KEY}\`);
  console.log(\`Google CSE CX loaded: \${!!process.env.GOOGLE_CSE_CX}\`);
});
